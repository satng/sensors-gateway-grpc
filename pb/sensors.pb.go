// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensors.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type SensorRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorRequest) Reset()         { *m = SensorRequest{} }
func (m *SensorRequest) String() string { return proto.CompactTextString(m) }
func (*SensorRequest) ProtoMessage()    {}
func (*SensorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b96d375cab19813b, []int{0}
}

func (m *SensorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorRequest.Unmarshal(m, b)
}
func (m *SensorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorRequest.Marshal(b, m, deterministic)
}
func (m *SensorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorRequest.Merge(m, src)
}
func (m *SensorRequest) XXX_Size() int {
	return xxx_messageInfo_SensorRequest.Size(m)
}
func (m *SensorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorRequest proto.InternalMessageInfo

func (m *SensorRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type SensorReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorReply) Reset()         { *m = SensorReply{} }
func (m *SensorReply) String() string { return proto.CompactTextString(m) }
func (*SensorReply) ProtoMessage()    {}
func (*SensorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b96d375cab19813b, []int{1}
}

func (m *SensorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorReply.Unmarshal(m, b)
}
func (m *SensorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorReply.Marshal(b, m, deterministic)
}
func (m *SensorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorReply.Merge(m, src)
}
func (m *SensorReply) XXX_Size() int {
	return xxx_messageInfo_SensorReply.Size(m)
}
func (m *SensorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorReply.DiscardUnknown(m)
}

var xxx_messageInfo_SensorReply proto.InternalMessageInfo

func (m *SensorReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SensorRequest)(nil), "sensors.SensorRequest")
	proto.RegisterType((*SensorReply)(nil), "sensors.SensorReply")
}

func init() { proto.RegisterFile("sensors.proto", fileDescriptor_b96d375cab19813b) }

var fileDescriptor_b96d375cab19813b = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0xcd, 0x2b,
	0xce, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb9,
	0x78, 0x83, 0xc1, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xbc,
	0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x9d, 0x8b, 0x1b,
	0xa6, 0xa8, 0x20, 0xa7, 0x52, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x1d, 0xa6,
	0x0a, 0xc6, 0x35, 0x72, 0xe5, 0x62, 0x87, 0x28, 0x2c, 0x16, 0xb2, 0xe2, 0xe2, 0x70, 0x49, 0x2c,
	0x49, 0x0c, 0x28, 0x2d, 0xce, 0x10, 0x12, 0xd3, 0x83, 0xd9, 0x8e, 0x62, 0x97, 0x94, 0x08, 0x86,
	0x78, 0x41, 0x4e, 0xa5, 0x12, 0x83, 0x93, 0x02, 0x17, 0x47, 0x72, 0x7e, 0xae, 0x5e, 0x7a, 0x51,
	0x41, 0xb2, 0x13, 0x0f, 0xd4, 0xc0, 0x00, 0x90, 0xbb, 0x03, 0x18, 0x17, 0x31, 0x31, 0x7b, 0xf8,
	0x84, 0x27, 0xb1, 0x81, 0xbd, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xad, 0xd1, 0xbf, 0xe3,
	0xd7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SensorsClient is the client API for Sensors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorsClient interface {
	// Sends a greeting
	DataPush(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*SensorReply, error)
}

type sensorsClient struct {
	cc *grpc.ClientConn
}

func NewSensorsClient(cc *grpc.ClientConn) SensorsClient {
	return &sensorsClient{cc}
}

func (c *sensorsClient) DataPush(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*SensorReply, error) {
	out := new(SensorReply)
	err := c.cc.Invoke(ctx, "/sensors.Sensors/DataPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorsServer is the server API for Sensors service.
type SensorsServer interface {
	// Sends a greeting
	DataPush(context.Context, *SensorRequest) (*SensorReply, error)
}

// UnimplementedSensorsServer can be embedded to have forward compatible implementations.
type UnimplementedSensorsServer struct {
}

func (*UnimplementedSensorsServer) DataPush(ctx context.Context, req *SensorRequest) (*SensorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataPush not implemented")
}

func RegisterSensorsServer(s *grpc.Server, srv SensorsServer) {
	s.RegisterService(&_Sensors_serviceDesc, srv)
}

func _Sensors_DataPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServer).DataPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.Sensors/DataPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServer).DataPush(ctx, req.(*SensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sensors_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors.Sensors",
	HandlerType: (*SensorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataPush",
			Handler:    _Sensors_DataPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sensors.proto",
}
